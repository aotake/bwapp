#!/bin/sh

if [ "$INCLUDE_PATH" = "" ]; then
    INCLUDE_PATH=../../libs/pear
fi
if [ -z "$PHP" ]; then
    PHP=`which php`
fi
if [ ! -d $INCLUDE_PATH ]; then
    echo "ERROR: not found include path: $INCLUDE_PATH"
    exit 1
fi
(exec $PHP -C -q -d include_path=$INCLUDE_PATH "$0" "$@") 2> /dev/null
if [ "$?" -ne "0" ]; then
    exit 1
fi
exit 0;
<?php
/**
 * PHP_CodeSniffer tokenises PHP code and detects violations of a
 * defined set of coding standards.
 *
 * PHP version 5
 *
 * @category  PHP
 * @package   PHP_CodeSniffer
 * @author    Greg Sherwood <gsherwood@squiz.net>
 * @author    Marc McIntyre <mmcintyre@squiz.net>
 * @copyright 2006-2011 Squiz Pty Ltd (ABN 77 084 670 600)
 * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence
 * @link      http://pear.php.net/package/PHP_CodeSniffer
 */

error_reporting(E_ALL | E_STRICT);

// Optionally use PHP_Timer to print time/memory stats for the run.
// Note that the reports are the ones who actually print the data
// as they decide if it is ok to print this data to screen.
@include_once 'PHP/Timer.php';
if (class_exists('PHP_Timer', false) === true) {
    PHP_Timer::start();
}

if (is_file(dirname(__FILE__).'/../CodeSniffer/CLI.php') === true) {
    include_once dirname(__FILE__).'/../CodeSniffer/CLI.php';
} else {
    include_once 'PHP/CodeSniffer/CLI.php';
}

$phpcs = new PHP_CodeSniffer_CLI();
$phpcs->checkRequirements();

$numErrors = $phpcs->process();
if ($numErrors === 0) {
    exit(0);
} else {
    exit(1);
}

?>
