<?php
/*
 * Generated by skel.sh
 */
class <{$ModuleName}>Base_Form_<{$TableName}>
{
    private $_controller;
    private $_registry;
    private $_zv;
    private $_param;

    protected $_errors;
    protected $_error_num;

    public function __construct(&$controller)
    {
        $this->_controller = $controller;
        $this->_zv = new Ao_View();
        $this->_param = array();
        $this->_registry = Zend_Registry::getInstance();
    }
    
    public function validate()
    {
        $validator = new <{$ModuleName}>Base_Form_Validator_<{$TableName}>($this->_controller);
        // $chk = $validator->listInput(); // リスト形式フォーム用
        $chk = $validator->input(); // カード形式フォーム用
        $this->_errors = $chk["error"];
        //$this->_error_num = $chk["total_error_num"]; //リスト形式用
        $this->_error_num = $validator->countError($chk["error"]);
    }   
    public function errors()
    {
        return $this->_errors;
    }
    public function errorNum()
    {   
        return $this->_error_num;
    }
    public function setParams($params = array())
    {
        $req = $this->_controller->getRequest();
        foreach($params as $k => $v){
            $req->setParam($k, $v);
        }   
    } 

    public function formElements()
    {
        return array(
<{foreach from=$tableInfo item=item}>
<{if $item.DATA_TYPE == "text" && ($item.FORM == "" || $item.FORM == "textarea")}>
            "<{$item.COLUMN_NAME}>" => $this->tarea<{$item.COLUMN_NAME|to_pascal}>(),
<{elseif $item.DATA_TYPE == "tinyint(1)" || $item.FORM == "radio"}>
            "<{$item.COLUMN_NAME}>" => $this->radio<{$item.COLUMN_NAME|to_pascal}>(),
<{elseif $item.FORM == "select"}>
            "<{$item.COLUMN_NAME}>" => $this->select<{$item.COLUMN_NAME|to_pascal}>(),
<{elseif $item.COLUMN_NAME == "id" || $item.COLUMN_NAME|substr:-3 == "_id" || $item.COLUMN_NAME == "uid"}>
            "<{$item.COLUMN_NAME}>" => $this->hidden<{$item.COLUMN_NAME|to_pascal}>(),
<{elseif $item.DATA_TYPE == "int" && $item.COLUMN_NAME == "pub_date"}>
            "pub_date_y" => $this->selectPubDateY(),
            "pub_date_m" => $this->selectPubDateM(),
            "pub_date_d" => $this->selectPubDateD(),
            "pub_date_h" => $this->selectPubDateH(),
            "pub_date_i" => $this->selectPubDateI(),
            "pub_date_s" => $this->selectPubDateS(),
<{else}>
            "<{$item.COLUMN_NAME}>" => $this->text<{$item.COLUMN_NAME|to_pascal}>(),
<{/if}>
<{/foreach}>
        );
    }
<{foreach from=$tableInfo item=item}>
<{*
  * TEXTAREA 型
  *
  *}>
<{if $item.DATA_TYPE == "text" && ($item.FORM == "" || $item.FORM == "textarea")}>
    public function tarea<{$item.COLUMN_NAME|to_pascal}>()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("<{$item.COLUMN_NAME}>");
        $name = "<{$item.COLUMN_NAME}>";
        $attr = array(
            "id" => "<{$item.COLUMN_NAME}>",
            "class" => "<{$item.COLUMN_NAME}> ckeditor",
            "cols" => 60,
            "rows" => 5,
        );
        return $this->_zv->formTextarea($name, $default, $attr);
    }
<{*
  * radio タイプ
  *
  *}>
<{elseif $item.DATA_TYPE == "tinyint(1)" || $item.FORM == "radio"}>
    public function radio<{$item.COLUMN_NAME|to_pascal}>()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("<{$item.COLUMN_NAME}>");
        if($default !== 0 && $default == ""){
            // Request でデフォルト値が取得できなかった場合
            $default = "<{$item.DEFAULT}>";
        }
        $name = "<{$item.COLUMN_NAME}>";
<{if $item.OPTION.ref_db}>
        $model = new <{$item.OPTION.module|ucfirst}>_Model_<{$item.OPTION.model|ucfirst}>();
        $select = $model->select()
            ->where("delete_flag = 0 or delete_flag is null")
            ->order("id asc")
            ;
        $vos = $model->fetchAll($select);
        $array = array();
        if($vos){
            foreach($vos as $i => $vo){
                $array[$vo->get("<{$item.OPTION.key}>")] = $vo->get("<{$item.OPTION.val}>");//"住所".($i + 1);
            }
        }
<{else if $item.OPTION.ref_conf}>
        $array = $this->_registry["modconf"]
                    -><{$module_name}>
                    -><{$item.OPTION.section}>
                    ->toArray();
<{else if $item.OPTION}>
        $array = array(
<{foreach from=$item.OPTION key=key item=val}>
            "<{$key}>" => "<{$val}>",
<{/foreach}>
        );
<{else}>
        $array = array(
            0 => "no",
            1 => "yes",
        );
<{/if}>
        $attr = array(
            "id" => "<{$item.COLUMN_NAME}>",
            "class" => "<{$item.COLUMN_NAME}>",
        );
        $listsep = "<{if $item.SEPARATOR == "br"}><br /><{else}>&nbsp;<{/if}>";
        return $this->_zv->formRadio($name, $default, $attr, $array, $listsep);
    }
<{*
  * SELECT タイプ
  *
  *}>
<{elseif $item.OPTION != "" && $item.FORM == "select"}>
    public function select<{$item.COLUMN_NAME|to_pascal}>()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("<{$item.COLUMN_NAME}>");
        $name = "<{$item.COLUMN_NAME}>";
        $attr = array(
            "id" => "<{$item.COLUMN_NAME}>",
            "class" => "<{$item.COLUMN_NAME}>",
        );
<{if $item.OPTION.ref_db}>
        $model = new <{$item.OPTION.module|ucfirst}>_Model_<{$item.OPTION.model|ucfirst}>();
        $select = $model->select()
            ->where("delete_flag = 0 or delete_flag is null")
            ->order("id asc")
            ;
        $vos = $model->fetchAll($select);
        $array = array();
        if($vos){
            foreach($vos as $i => $vo){
                $array[$vo->get("<{$item.OPTION.key}>")] = $vo->get("<{$item.OPTION.val}>");//"住所".($i + 1);
            }
        }
<{else if $item.OPTION.ref_conf}>
        $array = $this->_registry["modconf"]
                    -><{$module_name}>
                    -><{$item.OPTION.section}>
                    ->toArray();
<{else if $item.OPTION}>
        $array = array(
<{foreach from=$item.OPTION key=key item=val}>
            "<{$key}>" => "<{$val}>",
<{/foreach}>
        );
<{/if}>
        return $this->_zv->formSelect($name, $default, $attr, $array);
    }
<{*
  * 出版日を INT で持つ
  *
  *}>
<{elseif $item.DATA_TYPE == "int" && $item.COLUMN_NAME == "pub_date"}>
    public function selectPubDateY()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("pub_date_y");
        $name = "pub_date_y";
        $attr = array(
            "id" => "pub_date_y",
            "class" => "pub_date_y",
        );
        $start_y = date("Y") - 5; 
        for($y = 2008; $y < date("Y") + 10; $y++){
            $array[$y] = $y;
        }
        if(!$default){
            $default = date("Y");
        }
        return $this->_zv->formSelect($name, $default, $attr, $array);
    }
    public function selectPubDateM()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("pub_date_m");
        $name = "pub_date_m";
        $attr = array(
            "id" => "pub_date_m",
            "class" => "pub_date_m",
        );
        for($m = 1; $m <= 12; $m++){
            $array[$m] = $m;
        }
        if(!$default){
            $default = date("m");
        }
        return $this->_zv->formSelect($name, $default, $attr, $array);
    }
    public function selectPubDateD()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("pub_date_d");
        $name = "pub_date_d";
        $attr = array(
            "id" => "pub_date_d",
            "class" => "pub_date_d",
        );
        for($d = 1; $d <= 31; $d++){
            $array[$d] = $d;
        }
        if(!$default){
            $default = date("d");
        }
        return $this->_zv->formSelect($name, $default, $attr, $array);
    }
    public function selectPubDateH()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("pub_date_h");
        $name = "pub_date_h";
        $attr = array(
            "id" => "pub_date_h",
            "class" => "pub_date_h",
        );
        for($h = 0; $h <= 24; $h++){
            $array[$h] = $h;
        }
        if(!$default){
            $default = 0;
        }
        return $this->_zv->formSelect($name, $default, $attr, $array);
    }
    public function selectPubDateI()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("pub_date_i");
        $name = "pub_date_i";
        $attr = array(
            "id" => "pub_date_i",
            "class" => "pub_date_i",
        );
        for($m = 0; $m <= 59; $m++){
            $array[$m] = $m;
        }
        if(!$default){
            $default = 0;
        }
        return $this->_zv->formSelect($name, $default, $attr, $array);
    }
    public function selectPubDateS()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("pub_date_s");
        $name = "pub_date_s";
        $attr = array(
            "id" => "pub_date_s",
            "class" => "pub_date_s",
        );
        for($d = 0; $d <= 59; $d++){
            $array[$d] = $d;
        }
        if(!$default){
            $default = 0;
        }
        return $this->_zv->formSelect($name, $default, $attr, $array);
    }
<{*
  * その他
  *
  *}>
<{else}>
    public function text<{$item.COLUMN_NAME|to_pascal}>()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("<{$item.COLUMN_NAME}>");
        $name = "<{$item.COLUMN_NAME}>";
        $attr = array(
            "id" => "<{$item.COLUMN_NAME}>",
            "class" => "<{$item.COLUMN_NAME}>",
<{if $item.DATA_TYPE == "int"}>
            "size" => 2,
<{else}>
            "size" => 30,
<{/if}>
        );
        return $this->_zv->formText($name, $default, $attr);
    }
<{/if}>
<{/foreach}>
    public function confirmElements()
    {
        return array(
<{foreach from=$tableInfo item=item}>
            "<{$item.COLUMN_NAME}>" => $this->hidden<{$item.COLUMN_NAME|to_pascal}>(),
<{/foreach}>
        );
    }
<{foreach from=$tableInfo item=item}>
    public function hidden<{$item.COLUMN_NAME|to_pascal}>()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("<{$item.COLUMN_NAME}>");
<{if $item.COLUMN_NAME == "uid"}>
        if(!$default){
            $sess = new Zend_Session_Namespace("auth");
            $default = $sess->user_id;
        }
<{/if}>
        $name = "<{$item.COLUMN_NAME}>";
        return $this->_zv->formHidden($name, $default);
    }
<{/foreach}>

    public function showElements()
    {
        return array(
<{foreach from=$tableInfo item=item}>
            "<{$item.COLUMN_NAME}>" => $this->show<{$item.COLUMN_NAME|to_pascal}>(),
<{/foreach}>
        );
    }
<{foreach from=$tableInfo item=item}>
    public function show<{$item.COLUMN_NAME|to_pascal}>()
    {
        $req = $this->_controller->getRequest();
        $default = $req->getParam("<{$item.COLUMN_NAME}>");

<{if $item.FORM == "radio" && $item.OPTION}>
<{if $item.OPTION.ref_db}>
        $model = new <{$item.OPTION.module|ucfirst}>_Model_<{$item.OPTION.model|ucfirst}>();
        $select = $model->select()
            ->where("<{$item.OPTION.key}> = ?", $default)
            ;
        $vos = $model->fetchAll($select);
        $vo = current($vos);
        $default = $vo->get("<{$item.OPTION.val}>");
<{else if $item.OPTION.ref_conf}>
        $array = $this->_registry["modconf"]
                    -><{$module_name}>
                    -><{$item.OPTION.section}>
                    ->toArray();
        $default = $array[$default];
<{else if $item.OPTION}>
        <{foreach from=$item.OPTION key=key item=val}>
            $array[<{$key}>] = "<{$val}>";
        <{/foreach}>
        $default = $array[$default];
<{else}>
        $array = array(
            0 => "no",
            1 => "yes",
        );
        $default = $array[$default];
<{/if}>
<{/if}>

        return $default;
    }
<{/foreach}>

}
