<?php
/*
 * Generated by manager.sh
 */
class <{$ModuleName}>Base_Manager_<{$ManagerName}> extends Manager
{
    var $controller;
    var $request;

    public function __construct(&$controller)
    {
        $this->controller = $controller;
        $this->request = $this->controller->getRequest();
        $this->auth = new Zend_Session_Namespace("auth");
<{foreach from=$UseModels item=item}>
        $this->m<{$item.tableName}>= new <{$item.className}>();
<{/foreach}>
    }

<{foreach from=$UseModels item=item}>
    public function get<{$item.tableName}>Vo($param = array())
    {
        $model =& $this->m<{$item.tableName}>;
        $vo = $model->getVo($param);
        //$vo->set("is_released", 1);
        return $vo;
    }
    public function get<{$item.tableName}>($id = null)
    {
        $model =& $this->m<{$item.tableName}>;
        $select = $model->select();
        $select->where("delete_flag = 0 or delete_flag is null");
        $select->order("id asc");
        if($id){
            $select->where("id = ?", $id);
        }
        return $model->fetchAll($select);
    }
    public function getPage($limit = 20, $offset = 0, $orders = array("id asc"), $keyword = null)
    {
        $model =& $this->m<{$item.tableName}>;
        $select = $model->select();
        $select->where("delete_flag = 0 or delete_flag is null");
        // ソート条件の正規化(?)
        if($orders == null){
            $orders = array("id asc");
        } else if (is_string($orders)) {
            $orders = array($orders);
        }
        // ソート条件登録
        foreach($orders as $order){
            $select->order($order);
        }
        if($keyword){
            //$keyword == Ao_Util_TextSanitizer::sanitize($keyword);
            $m   = $this->controller->getRequest()->getModuleName();
            $reg = Zend_Registry::getInstance();
            if(isset($reg["modconf"]->$m)
                && isset($reg["modconf"]->$m->search)
                && isset($reg["modconf"]->$m->search->target_columns)
            ){
                $target_columns = $reg["modconf"]->$m->search->target_columns;
                $target_columns = explode(",", $target_columns);
                foreach($target_columns as $col){
                    $cond[] = $col." like '%".$keyword."%'";
                }   
                $select->where(implode(" or ", $cond));
            }
        }
        $select->limit($limit, $offset);
        return $model->fetchAll($select);
    }
    public function getCount($keyword = null)
    {
        $count = 0;
        $model =& $this->m<{$item.tableName}>;
        $select = $model->select()
            ->setIntegrityCheck(false)
            ->from($this->m<{$item.tableName}>->name(), 'count(*) as count');
        $select->where("delete_flag = 0 or delete_flag is null");
        if($keyword){
            //$keyword == Ao_Util_TextSanitizer::sanitize($keyword);
            $m   = $this->controller->getRequest()->getModuleName();
            $reg = Zend_Registry::getInstance();
            if(isset($reg["modconf"]->$m)
                && isset($reg["modconf"]->$m->search)
                && isset($reg["modconf"]->$m->search->target_columns)
            ){
                $target_columns = $reg["modconf"]->$m->search->target_columns;
                $target_columns = explode(",", $target_columns);
                foreach($target_columns as $col){
                    $cond[] = $col." like '%".$keyword."%'";
                }   
                $select->where(implode(" or ", $cond));
            }
        }
        $res = $model->fetchAll($select,1);
        if($res){
            $count = $res[0]["count"];
        }
        return $count;
    }
    public function save<{$item.tableName}>($vo)
    {
        $model =& $this->m<{$item.tableName}>;
        $model->getAdapter()->beginTransaction();
        try{
            $id = $model->save($vo);
            $model->getAdapter()->commit(); 
        } catch(Exception $e){
            $model->getAdapter()->rollback(); 
            print $e->getMessage();
            throw $e;
        }
        return $id;
    }
    public function delete<{$item.tableName}>($id = null)
    {
        $req = $this->controller->getRequest();
        $id = $req->getParam("id");
        if($id == ""){
            throw new Zend_Exception("ID が取得できませんでした");
        }
        return $this->m<{$item.tableName}>->del($id);
    }

<{/foreach}>
/* pub_date が int 型であるときに利用するコード

    // 日付指定のデータを元に日付をUNIX_TIMESTAMP表現に変換する(開始)
    public function convYmdToIntPubDate(&$param)
    {
        $y = (int)$param["pub_date_y"];
        $m = (int)$param["pub_date_m"];
        $d = (int)$param["pub_date_d"];
        $h = (int)$param["pub_date_h"];
        $i = (int)$param["pub_date_i"];
        $s = 0; //(int)$param["pub_date_s"];
        // 日付が正しく指定されていなければ、時刻が選択されていても 0 とする
        if($y == "--" || $m == "--" || $d == "--"){
            $param["pub_date"] = 0;
        } else {
            $param["pub_date"] = mktime($h, $i, $s, $m, $d, $y);
        }
    }
    // UNIX_TIMESTAMP を日付データに変換する
    public function convIntToYmdPubDate(&$vo)
    {
        $utime = $vo->get("pub_date");
        if($utime == 0){
            $vo->set("pub_date_y", "--");
            $vo->set("pub_date_m", "--");
            $vo->set("pub_date_d", "--");
            $vo->set("pub_date_h", "--");
            $vo->set("pub_date_i", "--");
        } else {
            $vo->set("pub_date_y", date("Y", $vo->get("pub_date")));
            $vo->set("pub_date_m", date("m", $vo->get("pub_date")));
            $vo->set("pub_date_d", date("d", $vo->get("pub_date")));
            $vo->set("pub_date_h", date("H", $vo->get("pub_date")));
            $vo->set("pub_date_i", date("i", $vo->get("pub_date")));
        }
    }
*/
/* sample of left join
    public function getRolesByUid($rid = null)
    {
        $model = new Model_Role();
        $model_ur= new Model_RoleRole();
        $select = $model->select();
        $select->setIntegrityCheck(false)
            ->from(array("r" => $model->name()), array("*"))
            ->joinLeft(
                array("ur" => $model_ur->name()),
                "r.rid = ur.rid",
                array("*"))
            ->where("ur.rid = ?", (int)$rid)
            ->order("r.rid asc")
            ;
        $res = $model->fetchAll($select, true);
        if($res){
            return $this->_assignCommonVos($res);
        } else {
            return null;
        }
    }
*/

}
